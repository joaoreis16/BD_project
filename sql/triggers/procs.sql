/*
*	TRATA DE REMOVER DA POSIÇAO CASO O MILITAR REPRESENTE
*	UMA BASE OU UM RAMO.
*/
CREATE PROC EXERCITO.deleteMilitar @nCC INT
AS
	BEGIN		
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC)
			BEGIN
				IF EXISTS (SELECT * FROM EXERCITO.ramo WHERE nCC = @nCC)
					BEGIN
						UPDATE EXERCITO.ramo SET nCC=NULL, data_inicio=NULL, data_fim=NULL 
						WHERE nCC = @nCC
					END
		
				IF EXISTS (SELECT * FROM EXERCITO.base_militar WHERE nCC = @nCC)
					BEGIN
						UPDATE EXERCITO.base_militar SET nCC=NULL, data_inicio=NULL, data_fim=NULL 
						WHERE nCC = @nCC
					END
				DELETE FROM EXERCITO.militar WHERE nCC = @nCC
				RETURN 1
			END
		ELSE
			RAISERROR ('MILITAR NÃO EXISTE',1,1)
			RETURN 0
	END
GO

/*
*	COLOCA nCC COMO RESPONSAVEL DE RAMO
*/
CREATE PROC EXERCITO.setResponsavelRamo @nCC INT, @ramo INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC) AND
			EXISTS (SELECT * FROM EXERCITO.ramo WHERE id = @ramo)
			BEGIN
				UPDATE EXERCITO.ramo SET nCC = @nCC WHERE id = @ramo
			RETURN 1
			END
		ELSE
			RAISERROR ('RAMO OU MILITAR NÃO EXISTENTES',1,1)
			RETURN 0
	END
GO

/*
*	COLOCA nCC COMO RESPONSAVEL DE BASE
*/
CREATE PROC EXERCITO.setResponsavelBase @nCC INT, @base INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC) AND
			EXISTS (SELECT * FROM EXERCITO.base_militar WHERE id = @base)
			BEGIN
				UPDATE EXERCITO.base_militar SET nCC = @nCC WHERE id = @base
			RETURN 1
			END
		ELSE
			RAISERROR ('BASE OU MILITAR NÃO EXISTENTES',1,1)
			RETURN 0
	END
GO

/*
*	ADICIONAR MILITAR A PELOTAO
*/
CREATE PROC EXERCITO.addToPelotao @nCC INT, @pel INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC)
			AND EXISTS (SELECT * FROM EXERCITO.pelotao WHERE id = @pel)
			BEGIN
				UPDATE EXERCITO.militar SET pelotao=@pel
				WHERE nCC=@nCC
				RETURN 1
			END
		ELSE
			RAISERROR ('PELOTAO OU MILITAR NÃO EXISTENTES',1,1)
			RETURN 0
	END
GO

/*
*	REMOVE MILITAR DE UM PELOTAO
*/
CREATE PROC EXERCITO.removeFromPelotao @nCC INT, @pel INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC)
			BEGIN
				IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC = @nCC AND pelotao = @pel)
					BEGIN
						UPDATE EXERCITO.militar SET pelotao=NULL WHERE nCC = @nCC
						RETURN 1
					END
				ELSE
					RAISERROR ('MILITAR NAO PERTENCE AO PELOTAO',1,1)
					RETURN 0 
			END
		ELSE
			RAISERROR ('MILITAR NAO EXISTE',1,1)
	END
GO

/*
*	REMOVE UM PELOTAO 
*/
CREATE PROC EXERCITO.deletePelotao @pel INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.pelotao WHERE id = @pel)
			BEGIN
				UPDATE EXERCITO.militar SET pelotao=NULL WHERE pelotao = @pel
				DELETE FROM EXERCITO.pelotao WHERE id = @pel
				RETURN 1
			END
		ELSE
			RAISERROR ('PELOTAO NAO EXISTE',1,1)
	END 
GO

/*
*	ASSIGN UM PELOTAO A UMA MISSAO
*/
CREATE PROC EXERCITO.assignPelToMissao @pel INT, @mis INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.pelotao WHERE id = @pel)
			AND EXISTS (SELECT * FROM EXERCITO.missao WHERE id = @mis)
			BEGIN
				UPDATE EXERCITO.pelotao SET idMissao = @mis WHERE id = @pel
				RETURN 0
			END
		ELSE
			RAISERROR ('MISSAO OU PELOTAO NAO EXISTEM',1,1)
			RETURN 0
	END
GO

/*
*	CRIAR UM SOLDADO ATRAVES DE MILITAR
*/
CREATE PROC EXERCITO.createSoldado @nCC INT, @tipo INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC=@nCC)
			BEGIN
				INSERT INTO EXERCITO.soldado(nCC, tipo) VALUES (@nCC, @tipo)
				RETURN 1
			END
		ELSE
			RAISERROR ('nCC NÃO REGISTADO',1,1)
			RETURN 0
	END
GO

/*
*	CRIAR UM ENGENHEIRO ATRAVES DE MILITAR
*/
CREATE PROC EXERCITO.createEngenheiro @nCC INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC=@nCC)
			BEGIN
				INSERT INTO EXERCITO.engenheiro(nCC) VALUES (@nCC)
				RETURN 1
			END
		ELSE
			RAISERROR ('nCC NÃO REGISTADO',1,1)
			RETURN 0
	END
GO

/*
*	CRIAR UM MEDICO ATRAVES DE MILITAR
*/
CREATE PROC EXERCITO.createMedico @nCC INT, @espec INT
AS
	BEGIN
		IF EXISTS (SELECT * FROM EXERCITO.militar WHERE nCC=@nCC)
			BEGIN
				INSERT INTO EXERCITO.medico(nCC, especialidade) VALUES (@nCC, @espec)
				RETURN 1
			END
		ELSE
			RAISERROR ('nCC NÃO REGISTADO',1,1)
			RETURN 0
	END
GO
